/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package viz;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class Lens implements org.apache.thrift.TBase<Lens, Lens._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Lens");

  private static final org.apache.thrift.protocol.TField HTML_FIELD_DESC = new org.apache.thrift.protocol.TField("html", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField CONTAINED_FIELDS_FIELD_DESC = new org.apache.thrift.protocol.TField("containedFields", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField HTML_PROPS_FIELD_DESC = new org.apache.thrift.protocol.TField("htmlProps", org.apache.thrift.protocol.TType.MAP, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new LensStandardSchemeFactory());
    schemes.put(TupleScheme.class, new LensTupleSchemeFactory());
  }

  public String html; // required
  public List<String> containedFields; // required
  public Map<String,String> htmlProps; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    HTML((short)1, "html"),
    CONTAINED_FIELDS((short)2, "containedFields"),
    HTML_PROPS((short)3, "htmlProps");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // HTML
          return HTML;
        case 2: // CONTAINED_FIELDS
          return CONTAINED_FIELDS;
        case 3: // HTML_PROPS
          return HTML_PROPS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.HTML, new org.apache.thrift.meta_data.FieldMetaData("html", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CONTAINED_FIELDS, new org.apache.thrift.meta_data.FieldMetaData("containedFields", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.HTML_PROPS, new org.apache.thrift.meta_data.FieldMetaData("htmlProps", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Lens.class, metaDataMap);
  }

  public Lens() {
  }

  public Lens(
    String html,
    List<String> containedFields,
    Map<String,String> htmlProps)
  {
    this();
    this.html = html;
    this.containedFields = containedFields;
    this.htmlProps = htmlProps;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Lens(Lens other) {
    if (other.isSetHtml()) {
      this.html = other.html;
    }
    if (other.isSetContainedFields()) {
      List<String> __this__containedFields = new ArrayList<String>();
      for (String other_element : other.containedFields) {
        __this__containedFields.add(other_element);
      }
      this.containedFields = __this__containedFields;
    }
    if (other.isSetHtmlProps()) {
      Map<String,String> __this__htmlProps = new HashMap<String,String>();
      for (Map.Entry<String, String> other_element : other.htmlProps.entrySet()) {

        String other_element_key = other_element.getKey();
        String other_element_value = other_element.getValue();

        String __this__htmlProps_copy_key = other_element_key;

        String __this__htmlProps_copy_value = other_element_value;

        __this__htmlProps.put(__this__htmlProps_copy_key, __this__htmlProps_copy_value);
      }
      this.htmlProps = __this__htmlProps;
    }
  }

  public Lens deepCopy() {
    return new Lens(this);
  }

  @Override
  public void clear() {
    this.html = null;
    this.containedFields = null;
    this.htmlProps = null;
  }

  public String getHtml() {
    return this.html;
  }

  public Lens setHtml(String html) {
    this.html = html;
    return this;
  }

  public void unsetHtml() {
    this.html = null;
  }

  /** Returns true if field html is set (has been assigned a value) and false otherwise */
  public boolean isSetHtml() {
    return this.html != null;
  }

  public void setHtmlIsSet(boolean value) {
    if (!value) {
      this.html = null;
    }
  }

  public int getContainedFieldsSize() {
    return (this.containedFields == null) ? 0 : this.containedFields.size();
  }

  public java.util.Iterator<String> getContainedFieldsIterator() {
    return (this.containedFields == null) ? null : this.containedFields.iterator();
  }

  public void addToContainedFields(String elem) {
    if (this.containedFields == null) {
      this.containedFields = new ArrayList<String>();
    }
    this.containedFields.add(elem);
  }

  public List<String> getContainedFields() {
    return this.containedFields;
  }

  public Lens setContainedFields(List<String> containedFields) {
    this.containedFields = containedFields;
    return this;
  }

  public void unsetContainedFields() {
    this.containedFields = null;
  }

  /** Returns true if field containedFields is set (has been assigned a value) and false otherwise */
  public boolean isSetContainedFields() {
    return this.containedFields != null;
  }

  public void setContainedFieldsIsSet(boolean value) {
    if (!value) {
      this.containedFields = null;
    }
  }

  public int getHtmlPropsSize() {
    return (this.htmlProps == null) ? 0 : this.htmlProps.size();
  }

  public void putToHtmlProps(String key, String val) {
    if (this.htmlProps == null) {
      this.htmlProps = new HashMap<String,String>();
    }
    this.htmlProps.put(key, val);
  }

  public Map<String,String> getHtmlProps() {
    return this.htmlProps;
  }

  public Lens setHtmlProps(Map<String,String> htmlProps) {
    this.htmlProps = htmlProps;
    return this;
  }

  public void unsetHtmlProps() {
    this.htmlProps = null;
  }

  /** Returns true if field htmlProps is set (has been assigned a value) and false otherwise */
  public boolean isSetHtmlProps() {
    return this.htmlProps != null;
  }

  public void setHtmlPropsIsSet(boolean value) {
    if (!value) {
      this.htmlProps = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case HTML:
      if (value == null) {
        unsetHtml();
      } else {
        setHtml((String)value);
      }
      break;

    case CONTAINED_FIELDS:
      if (value == null) {
        unsetContainedFields();
      } else {
        setContainedFields((List<String>)value);
      }
      break;

    case HTML_PROPS:
      if (value == null) {
        unsetHtmlProps();
      } else {
        setHtmlProps((Map<String,String>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case HTML:
      return getHtml();

    case CONTAINED_FIELDS:
      return getContainedFields();

    case HTML_PROPS:
      return getHtmlProps();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case HTML:
      return isSetHtml();
    case CONTAINED_FIELDS:
      return isSetContainedFields();
    case HTML_PROPS:
      return isSetHtmlProps();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Lens)
      return this.equals((Lens)that);
    return false;
  }

  public boolean equals(Lens that) {
    if (that == null)
      return false;

    boolean this_present_html = true && this.isSetHtml();
    boolean that_present_html = true && that.isSetHtml();
    if (this_present_html || that_present_html) {
      if (!(this_present_html && that_present_html))
        return false;
      if (!this.html.equals(that.html))
        return false;
    }

    boolean this_present_containedFields = true && this.isSetContainedFields();
    boolean that_present_containedFields = true && that.isSetContainedFields();
    if (this_present_containedFields || that_present_containedFields) {
      if (!(this_present_containedFields && that_present_containedFields))
        return false;
      if (!this.containedFields.equals(that.containedFields))
        return false;
    }

    boolean this_present_htmlProps = true && this.isSetHtmlProps();
    boolean that_present_htmlProps = true && that.isSetHtmlProps();
    if (this_present_htmlProps || that_present_htmlProps) {
      if (!(this_present_htmlProps && that_present_htmlProps))
        return false;
      if (!this.htmlProps.equals(that.htmlProps))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(Lens other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    Lens typedOther = (Lens)other;

    lastComparison = Boolean.valueOf(isSetHtml()).compareTo(typedOther.isSetHtml());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHtml()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.html, typedOther.html);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetContainedFields()).compareTo(typedOther.isSetContainedFields());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContainedFields()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.containedFields, typedOther.containedFields);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHtmlProps()).compareTo(typedOther.isSetHtmlProps());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHtmlProps()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.htmlProps, typedOther.htmlProps);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Lens(");
    boolean first = true;

    sb.append("html:");
    if (this.html == null) {
      sb.append("null");
    } else {
      sb.append(this.html);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("containedFields:");
    if (this.containedFields == null) {
      sb.append("null");
    } else {
      sb.append(this.containedFields);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("htmlProps:");
    if (this.htmlProps == null) {
      sb.append("null");
    } else {
      sb.append(this.htmlProps);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class LensStandardSchemeFactory implements SchemeFactory {
    public LensStandardScheme getScheme() {
      return new LensStandardScheme();
    }
  }

  private static class LensStandardScheme extends StandardScheme<Lens> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Lens struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // HTML
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.html = iprot.readString();
              struct.setHtmlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CONTAINED_FIELDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list52 = iprot.readListBegin();
                struct.containedFields = new ArrayList<String>(_list52.size);
                for (int _i53 = 0; _i53 < _list52.size; ++_i53)
                {
                  String _elem54; // required
                  _elem54 = iprot.readString();
                  struct.containedFields.add(_elem54);
                }
                iprot.readListEnd();
              }
              struct.setContainedFieldsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // HTML_PROPS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map55 = iprot.readMapBegin();
                struct.htmlProps = new HashMap<String,String>(2*_map55.size);
                for (int _i56 = 0; _i56 < _map55.size; ++_i56)
                {
                  String _key57; // required
                  String _val58; // optional
                  _key57 = iprot.readString();
                  _val58 = iprot.readString();
                  struct.htmlProps.put(_key57, _val58);
                }
                iprot.readMapEnd();
              }
              struct.setHtmlPropsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Lens struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.html != null) {
        oprot.writeFieldBegin(HTML_FIELD_DESC);
        oprot.writeString(struct.html);
        oprot.writeFieldEnd();
      }
      if (struct.containedFields != null) {
        oprot.writeFieldBegin(CONTAINED_FIELDS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.containedFields.size()));
          for (String _iter59 : struct.containedFields)
          {
            oprot.writeString(_iter59);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.htmlProps != null) {
        oprot.writeFieldBegin(HTML_PROPS_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.htmlProps.size()));
          for (Map.Entry<String, String> _iter60 : struct.htmlProps.entrySet())
          {
            oprot.writeString(_iter60.getKey());
            oprot.writeString(_iter60.getValue());
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class LensTupleSchemeFactory implements SchemeFactory {
    public LensTupleScheme getScheme() {
      return new LensTupleScheme();
    }
  }

  private static class LensTupleScheme extends TupleScheme<Lens> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Lens struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetHtml()) {
        optionals.set(0);
      }
      if (struct.isSetContainedFields()) {
        optionals.set(1);
      }
      if (struct.isSetHtmlProps()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetHtml()) {
        oprot.writeString(struct.html);
      }
      if (struct.isSetContainedFields()) {
        {
          oprot.writeI32(struct.containedFields.size());
          for (String _iter61 : struct.containedFields)
          {
            oprot.writeString(_iter61);
          }
        }
      }
      if (struct.isSetHtmlProps()) {
        {
          oprot.writeI32(struct.htmlProps.size());
          for (Map.Entry<String, String> _iter62 : struct.htmlProps.entrySet())
          {
            oprot.writeString(_iter62.getKey());
            oprot.writeString(_iter62.getValue());
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Lens struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.html = iprot.readString();
        struct.setHtmlIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list63 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.containedFields = new ArrayList<String>(_list63.size);
          for (int _i64 = 0; _i64 < _list63.size; ++_i64)
          {
            String _elem65; // required
            _elem65 = iprot.readString();
            struct.containedFields.add(_elem65);
          }
        }
        struct.setContainedFieldsIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TMap _map66 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.htmlProps = new HashMap<String,String>(2*_map66.size);
          for (int _i67 = 0; _i67 < _map66.size; ++_i67)
          {
            String _key68; // required
            String _val69; // optional
            _key68 = iprot.readString();
            _val69 = iprot.readString();
            struct.htmlProps.put(_key68, _val69);
          }
        }
        struct.setHtmlPropsIsSet(true);
      }
    }
  }

}

